# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache Java dependencies
      - restore_cache:
          keys:
          - v1-java-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-java-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-java-dependencies-{{ checksum "build.gradle" }}
      
      # Download and cache JavaScript dependencies
      - restore_cache:
          keys:
          - v1-js-dependencies-{{ checksum "~/repo/src/main/client/package-lock.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-js-dependencies-

      - run: gradle npm_install

      - save_cache:
          paths:
            - ~/repo/src/main/client/node_modules
          key: v1-js-dependencies-{{ checksum "~/repo/src/main/client/package-lock.json" }}
      # run both frontend and backend tests, and test the build
      - run: gradle build
      - store_artifacts:
          path: ~/repo/build/libs/
          destination: dist/
      - store_test_results:
          path: ~/repo/build/reports/
          destination: test-reports/
  deploy-job:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/deployment

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: setup Heroku
          command: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "a9:c6:15:38:e9:be:38:84:4e:7b:f6:4f:9c:4a:7f:7a"
      - run:
          name: Deploy Master to Heroku
          command: |
            git push heroku master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-job:  # only deploy when master successfully builds
          requires:
            - build
          filters:
            branches:
              only: master